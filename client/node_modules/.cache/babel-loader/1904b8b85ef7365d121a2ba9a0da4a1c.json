{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nfunction binaryOperation(operator, left, right) {\n  switch (operator) {\n    case '+':\n      return left + right;\n\n    case '-':\n      return left - right;\n\n    case '/':\n      return left / right;\n\n    case '%':\n      return left % right;\n\n    case '*':\n      return left * right;\n\n    case '**':\n      return Math.pow(left, right);\n\n    case '&':\n      return left & right;\n\n    case '|':\n      return left | right;\n\n    case '>>':\n      return left >> right;\n\n    case '>>>':\n      return left >>> right;\n\n    case '<<':\n      return left << right;\n\n    case '^':\n      return left ^ right;\n\n    case '==':\n      return left == right;\n\n    case '===':\n      return left === right;\n\n    case '!=':\n      return left != right;\n\n    case '!==':\n      return left !== right;\n\n    case 'in':\n      return left in right;\n\n    case 'instanceof':\n      return left instanceof right;\n\n    case '>':\n      return left > right;\n\n    case '<':\n      return left < right;\n\n    case '>=':\n      return left >= right;\n\n    case '<=':\n      return left <= right;\n  }\n}\n\nexports[\"default\"] = binaryOperation;","map":{"version":3,"sources":["C:/Users/bekke/Documents/Art Website/node_modules/constantinople/lib/binaryOperation.js"],"names":["exports","__esModule","binaryOperation","operator","left","right","Math","pow"],"mappings":"AAAA;;AACAA,OAAO,CAACC,UAAR,GAAqB,IAArB;;AACA,SAASC,eAAT,CAAyBC,QAAzB,EAAmCC,IAAnC,EAAyCC,KAAzC,EAAgD;AAC5C,UAAQF,QAAR;AACI,SAAK,GAAL;AACI,aAAOC,IAAI,GAAGC,KAAd;;AACJ,SAAK,GAAL;AACI,aAAOD,IAAI,GAAGC,KAAd;;AACJ,SAAK,GAAL;AACI,aAAOD,IAAI,GAAGC,KAAd;;AACJ,SAAK,GAAL;AACI,aAAOD,IAAI,GAAGC,KAAd;;AACJ,SAAK,GAAL;AACI,aAAOD,IAAI,GAAGC,KAAd;;AACJ,SAAK,IAAL;AACI,aAAOC,IAAI,CAACC,GAAL,CAASH,IAAT,EAAeC,KAAf,CAAP;;AACJ,SAAK,GAAL;AACI,aAAOD,IAAI,GAAGC,KAAd;;AACJ,SAAK,GAAL;AACI,aAAOD,IAAI,GAAGC,KAAd;;AACJ,SAAK,IAAL;AACI,aAAOD,IAAI,IAAIC,KAAf;;AACJ,SAAK,KAAL;AACI,aAAOD,IAAI,KAAKC,KAAhB;;AACJ,SAAK,IAAL;AACI,aAAOD,IAAI,IAAIC,KAAf;;AACJ,SAAK,GAAL;AACI,aAAOD,IAAI,GAAGC,KAAd;;AACJ,SAAK,IAAL;AACI,aAAOD,IAAI,IAAIC,KAAf;;AACJ,SAAK,KAAL;AACI,aAAOD,IAAI,KAAKC,KAAhB;;AACJ,SAAK,IAAL;AACI,aAAOD,IAAI,IAAIC,KAAf;;AACJ,SAAK,KAAL;AACI,aAAOD,IAAI,KAAKC,KAAhB;;AACJ,SAAK,IAAL;AACI,aAAOD,IAAI,IAAIC,KAAf;;AACJ,SAAK,YAAL;AACI,aAAOD,IAAI,YAAYC,KAAvB;;AACJ,SAAK,GAAL;AACI,aAAOD,IAAI,GAAGC,KAAd;;AACJ,SAAK,GAAL;AACI,aAAOD,IAAI,GAAGC,KAAd;;AACJ,SAAK,IAAL;AACI,aAAOD,IAAI,IAAIC,KAAf;;AACJ,SAAK,IAAL;AACI,aAAOD,IAAI,IAAIC,KAAf;AA5CR;AA8CH;;AACDL,OAAO,CAAC,SAAD,CAAP,GAAqBE,eAArB","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nfunction binaryOperation(operator, left, right) {\n    switch (operator) {\n        case '+':\n            return left + right;\n        case '-':\n            return left - right;\n        case '/':\n            return left / right;\n        case '%':\n            return left % right;\n        case '*':\n            return left * right;\n        case '**':\n            return Math.pow(left, right);\n        case '&':\n            return left & right;\n        case '|':\n            return left | right;\n        case '>>':\n            return left >> right;\n        case '>>>':\n            return left >>> right;\n        case '<<':\n            return left << right;\n        case '^':\n            return left ^ right;\n        case '==':\n            return left == right;\n        case '===':\n            return left === right;\n        case '!=':\n            return left != right;\n        case '!==':\n            return left !== right;\n        case 'in':\n            return left in right;\n        case 'instanceof':\n            return left instanceof right;\n        case '>':\n            return left > right;\n        case '<':\n            return left < right;\n        case '>=':\n            return left >= right;\n        case '<=':\n            return left <= right;\n    }\n}\nexports[\"default\"] = binaryOperation;\n"]},"metadata":{},"sourceType":"script"}