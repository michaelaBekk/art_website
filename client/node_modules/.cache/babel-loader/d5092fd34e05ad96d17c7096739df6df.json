{"ast":null,"code":"'use strict';\n\nvar assert = require('assert');\n\nvar walk = require('pug-walk');\n\nfunction error() {\n  throw require('pug-error').apply(null, arguments);\n}\n\nmodule.exports = link;\n\nfunction link(ast) {\n  assert(ast.type === 'Block', 'The top level element should always be a block');\n  var extendsNode = null;\n\n  if (ast.nodes.length) {\n    var hasExtends = ast.nodes[0].type === 'Extends';\n    checkExtendPosition(ast, hasExtends);\n\n    if (hasExtends) {\n      extendsNode = ast.nodes.shift();\n    }\n  }\n\n  ast = applyIncludes(ast);\n  ast.declaredBlocks = findDeclaredBlocks(ast);\n\n  if (extendsNode) {\n    var mixins = [];\n    var expectedBlocks = [];\n    ast.nodes.forEach(function addNode(node) {\n      if (node.type === 'NamedBlock') {\n        expectedBlocks.push(node);\n      } else if (node.type === 'Block') {\n        node.nodes.forEach(addNode);\n      } else if (node.type === 'Mixin' && node.call === false) {\n        mixins.push(node);\n      } else {\n        error('UNEXPECTED_NODES_IN_EXTENDING_ROOT', 'Only named blocks and mixins can appear at the top level of an extending template', node);\n      }\n    });\n    var parent = link(extendsNode.file.ast);\n    extend(parent.declaredBlocks, ast);\n    var foundBlockNames = [];\n    walk(parent, function (node) {\n      if (node.type === 'NamedBlock') {\n        foundBlockNames.push(node.name);\n      }\n    });\n    expectedBlocks.forEach(function (expectedBlock) {\n      if (foundBlockNames.indexOf(expectedBlock.name) === -1) {\n        error('UNEXPECTED_BLOCK', 'Unexpected block ' + expectedBlock.name, expectedBlock);\n      }\n    });\n    Object.keys(ast.declaredBlocks).forEach(function (name) {\n      parent.declaredBlocks[name] = ast.declaredBlocks[name];\n    });\n    parent.nodes = mixins.concat(parent.nodes);\n    parent.hasExtends = true;\n    return parent;\n  }\n\n  return ast;\n}\n\nfunction findDeclaredBlocks(ast)\n/*: {[name: string]: Array<BlockNode>}*/\n{\n  var definitions = {};\n  walk(ast, function before(node) {\n    if (node.type === 'NamedBlock' && node.mode === 'replace') {\n      definitions[node.name] = definitions[node.name] || [];\n      definitions[node.name].push(node);\n    }\n  });\n  return definitions;\n}\n\nfunction flattenParentBlocks(parentBlocks, accumulator) {\n  accumulator = accumulator || [];\n  parentBlocks.forEach(function (parentBlock) {\n    if (parentBlock.parents) {\n      flattenParentBlocks(parentBlock.parents, accumulator);\n    }\n\n    accumulator.push(parentBlock);\n  });\n  return accumulator;\n}\n\nfunction extend(parentBlocks, ast) {\n  var stack = {};\n  walk(ast, function before(node) {\n    if (node.type === 'NamedBlock') {\n      if (stack[node.name] === node.name) {\n        return node.ignore = true;\n      }\n\n      stack[node.name] = node.name;\n      var parentBlockList = parentBlocks[node.name] ? flattenParentBlocks(parentBlocks[node.name]) : [];\n\n      if (parentBlockList.length) {\n        node.parents = parentBlockList;\n        parentBlockList.forEach(function (parentBlock) {\n          switch (node.mode) {\n            case 'append':\n              parentBlock.nodes = parentBlock.nodes.concat(node.nodes);\n              break;\n\n            case 'prepend':\n              parentBlock.nodes = node.nodes.concat(parentBlock.nodes);\n              break;\n\n            case 'replace':\n              parentBlock.nodes = node.nodes;\n              break;\n          }\n        });\n      }\n    }\n  }, function after(node) {\n    if (node.type === 'NamedBlock' && !node.ignore) {\n      delete stack[node.name];\n    }\n  });\n}\n\nfunction applyIncludes(ast, child) {\n  return walk(ast, function before(node, replace) {\n    if (node.type === 'RawInclude') {\n      replace({\n        type: 'Text',\n        val: node.file.str.replace(/\\r/g, '')\n      });\n    }\n  }, function after(node, replace) {\n    if (node.type === 'Include') {\n      var childAST = link(node.file.ast);\n\n      if (childAST.hasExtends) {\n        childAST = removeBlocks(childAST);\n      }\n\n      replace(applyYield(childAST, node.block));\n    }\n  });\n}\n\nfunction removeBlocks(ast) {\n  return walk(ast, function (node, replace) {\n    if (node.type === 'NamedBlock') {\n      replace({\n        type: 'Block',\n        nodes: node.nodes\n      });\n    }\n  });\n}\n\nfunction applyYield(ast, block) {\n  if (!block || !block.nodes.length) return ast;\n  var replaced = false;\n  ast = walk(ast, null, function (node, replace) {\n    if (node.type === 'YieldBlock') {\n      replaced = true;\n      node.type = 'Block';\n      node.nodes = [block];\n    }\n  });\n\n  function defaultYieldLocation(node) {\n    var res = node;\n\n    for (var i = 0; i < node.nodes.length; i++) {\n      if (node.nodes[i].textOnly) continue;\n\n      if (node.nodes[i].type === 'Block') {\n        res = defaultYieldLocation(node.nodes[i]);\n      } else if (node.nodes[i].block && node.nodes[i].block.nodes.length) {\n        res = defaultYieldLocation(node.nodes[i].block);\n      }\n    }\n\n    return res;\n  }\n\n  if (!replaced) {\n    // todo: probably should deprecate this with a warning\n    defaultYieldLocation(ast).nodes.push(block);\n  }\n\n  return ast;\n}\n\nfunction checkExtendPosition(ast, hasExtends) {\n  var legitExtendsReached = false;\n  walk(ast, function (node) {\n    if (node.type === 'Extends') {\n      if (hasExtends && !legitExtendsReached) {\n        legitExtendsReached = true;\n      } else {\n        error('EXTENDS_NOT_FIRST', 'Declaration of template inheritance (\"extends\") should be the first thing in the file. There can only be one extends statement per file.', node);\n      }\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/bekke/Documents/Art Website/node_modules/pug-linker/index.js"],"names":["assert","require","walk","error","apply","arguments","module","exports","link","ast","type","extendsNode","nodes","length","hasExtends","checkExtendPosition","shift","applyIncludes","declaredBlocks","findDeclaredBlocks","mixins","expectedBlocks","forEach","addNode","node","push","call","parent","file","extend","foundBlockNames","name","expectedBlock","indexOf","Object","keys","concat","definitions","before","mode","flattenParentBlocks","parentBlocks","accumulator","parentBlock","parents","stack","ignore","parentBlockList","after","child","replace","val","str","childAST","removeBlocks","applyYield","block","replaced","defaultYieldLocation","res","i","textOnly","legitExtendsReached"],"mappings":"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","sourcesContent":["'use strict';\n\nvar assert = require('assert');\nvar walk = require('pug-walk');\n\nfunction error() {\n  throw require('pug-error').apply(null, arguments);\n}\n\nmodule.exports = link;\nfunction link(ast) {\n  assert(\n    ast.type === 'Block',\n    'The top level element should always be a block'\n  );\n  var extendsNode = null;\n  if (ast.nodes.length) {\n    var hasExtends = ast.nodes[0].type === 'Extends';\n    checkExtendPosition(ast, hasExtends);\n    if (hasExtends) {\n      extendsNode = ast.nodes.shift();\n    }\n  }\n  ast = applyIncludes(ast);\n  ast.declaredBlocks = findDeclaredBlocks(ast);\n  if (extendsNode) {\n    var mixins = [];\n    var expectedBlocks = [];\n    ast.nodes.forEach(function addNode(node) {\n      if (node.type === 'NamedBlock') {\n        expectedBlocks.push(node);\n      } else if (node.type === 'Block') {\n        node.nodes.forEach(addNode);\n      } else if (node.type === 'Mixin' && node.call === false) {\n        mixins.push(node);\n      } else {\n        error(\n          'UNEXPECTED_NODES_IN_EXTENDING_ROOT',\n          'Only named blocks and mixins can appear at the top level of an extending template',\n          node\n        );\n      }\n    });\n    var parent = link(extendsNode.file.ast);\n    extend(parent.declaredBlocks, ast);\n    var foundBlockNames = [];\n    walk(parent, function(node) {\n      if (node.type === 'NamedBlock') {\n        foundBlockNames.push(node.name);\n      }\n    });\n    expectedBlocks.forEach(function(expectedBlock) {\n      if (foundBlockNames.indexOf(expectedBlock.name) === -1) {\n        error(\n          'UNEXPECTED_BLOCK',\n          'Unexpected block ' + expectedBlock.name,\n          expectedBlock\n        );\n      }\n    });\n    Object.keys(ast.declaredBlocks).forEach(function(name) {\n      parent.declaredBlocks[name] = ast.declaredBlocks[name];\n    });\n    parent.nodes = mixins.concat(parent.nodes);\n    parent.hasExtends = true;\n    return parent;\n  }\n  return ast;\n}\n\nfunction findDeclaredBlocks(ast) /*: {[name: string]: Array<BlockNode>}*/ {\n  var definitions = {};\n  walk(ast, function before(node) {\n    if (node.type === 'NamedBlock' && node.mode === 'replace') {\n      definitions[node.name] = definitions[node.name] || [];\n      definitions[node.name].push(node);\n    }\n  });\n  return definitions;\n}\n\nfunction flattenParentBlocks(parentBlocks, accumulator) {\n  accumulator = accumulator || [];\n  parentBlocks.forEach(function(parentBlock) {\n    if (parentBlock.parents) {\n      flattenParentBlocks(parentBlock.parents, accumulator);\n    }\n    accumulator.push(parentBlock);\n  });\n  return accumulator;\n}\n\nfunction extend(parentBlocks, ast) {\n  var stack = {};\n  walk(\n    ast,\n    function before(node) {\n      if (node.type === 'NamedBlock') {\n        if (stack[node.name] === node.name) {\n          return (node.ignore = true);\n        }\n        stack[node.name] = node.name;\n        var parentBlockList = parentBlocks[node.name]\n          ? flattenParentBlocks(parentBlocks[node.name])\n          : [];\n        if (parentBlockList.length) {\n          node.parents = parentBlockList;\n          parentBlockList.forEach(function(parentBlock) {\n            switch (node.mode) {\n              case 'append':\n                parentBlock.nodes = parentBlock.nodes.concat(node.nodes);\n                break;\n              case 'prepend':\n                parentBlock.nodes = node.nodes.concat(parentBlock.nodes);\n                break;\n              case 'replace':\n                parentBlock.nodes = node.nodes;\n                break;\n            }\n          });\n        }\n      }\n    },\n    function after(node) {\n      if (node.type === 'NamedBlock' && !node.ignore) {\n        delete stack[node.name];\n      }\n    }\n  );\n}\n\nfunction applyIncludes(ast, child) {\n  return walk(\n    ast,\n    function before(node, replace) {\n      if (node.type === 'RawInclude') {\n        replace({type: 'Text', val: node.file.str.replace(/\\r/g, '')});\n      }\n    },\n    function after(node, replace) {\n      if (node.type === 'Include') {\n        var childAST = link(node.file.ast);\n        if (childAST.hasExtends) {\n          childAST = removeBlocks(childAST);\n        }\n        replace(applyYield(childAST, node.block));\n      }\n    }\n  );\n}\nfunction removeBlocks(ast) {\n  return walk(ast, function(node, replace) {\n    if (node.type === 'NamedBlock') {\n      replace({\n        type: 'Block',\n        nodes: node.nodes,\n      });\n    }\n  });\n}\n\nfunction applyYield(ast, block) {\n  if (!block || !block.nodes.length) return ast;\n  var replaced = false;\n  ast = walk(ast, null, function(node, replace) {\n    if (node.type === 'YieldBlock') {\n      replaced = true;\n      node.type = 'Block';\n      node.nodes = [block];\n    }\n  });\n  function defaultYieldLocation(node) {\n    var res = node;\n    for (var i = 0; i < node.nodes.length; i++) {\n      if (node.nodes[i].textOnly) continue;\n      if (node.nodes[i].type === 'Block') {\n        res = defaultYieldLocation(node.nodes[i]);\n      } else if (node.nodes[i].block && node.nodes[i].block.nodes.length) {\n        res = defaultYieldLocation(node.nodes[i].block);\n      }\n    }\n    return res;\n  }\n  if (!replaced) {\n    // todo: probably should deprecate this with a warning\n    defaultYieldLocation(ast).nodes.push(block);\n  }\n  return ast;\n}\n\nfunction checkExtendPosition(ast, hasExtends) {\n  var legitExtendsReached = false;\n  walk(ast, function(node) {\n    if (node.type === 'Extends') {\n      if (hasExtends && !legitExtendsReached) {\n        legitExtendsReached = true;\n      } else {\n        error(\n          'EXTENDS_NOT_FIRST',\n          'Declaration of template inheritance (\"extends\") should be the first thing in the file. There can only be one extends statement per file.',\n          node\n        );\n      }\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"script"}