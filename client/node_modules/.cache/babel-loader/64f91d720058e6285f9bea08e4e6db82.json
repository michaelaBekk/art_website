{"ast":null,"code":"'use strict';\n/*!\n * Pug\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar lex = require('pug-lexer');\n\nvar stripComments = require('pug-strip-comments');\n\nvar parse = require('pug-parser');\n\nvar load = require('pug-load');\n\nvar filters = require('pug-filters');\n\nvar link = require('pug-linker');\n\nvar generateCode = require('pug-code-gen');\n\nvar runtime = require('pug-runtime');\n\nvar runtimeWrap = require('pug-runtime/wrap');\n/**\n * Name for detection\n */\n\n\nexports.name = 'Pug';\n/**\n * Pug runtime helpers.\n */\n\nexports.runtime = runtime;\n/**\n * Template function cache.\n */\n\nexports.cache = {};\n\nfunction applyPlugins(value, options, plugins, name) {\n  return plugins.reduce(function (value, plugin) {\n    return plugin[name] ? plugin[name](value, options) : value;\n  }, value);\n}\n\nfunction findReplacementFunc(plugins, name) {\n  var eligiblePlugins = plugins.filter(function (plugin) {\n    return plugin[name];\n  });\n\n  if (eligiblePlugins.length > 1) {\n    throw new Error('Two or more plugins all implement ' + name + ' method.');\n  } else if (eligiblePlugins.length) {\n    return eligiblePlugins[0][name].bind(eligiblePlugins[0]);\n  }\n\n  return null;\n}\n/**\n * Object for global custom filters.  Note that you can also just pass a `filters`\n * option to any other method.\n */\n\n\nexports.filters = {};\n/**\n * Compile the given `str` of pug and return a function body.\n *\n * @param {String} str\n * @param {Object} options\n * @return {Object}\n * @api private\n */\n\nfunction compileBody(str, options) {\n  var debug_sources = {};\n  debug_sources[options.filename] = str;\n  var dependencies = [];\n  var plugins = options.plugins || [];\n  var ast = load.string(str, {\n    filename: options.filename,\n    basedir: options.basedir,\n    lex: function (str, options) {\n      var lexOptions = {};\n      Object.keys(options).forEach(function (key) {\n        lexOptions[key] = options[key];\n      });\n      lexOptions.plugins = plugins.filter(function (plugin) {\n        return !!plugin.lex;\n      }).map(function (plugin) {\n        return plugin.lex;\n      });\n      var contents = applyPlugins(str, {\n        filename: options.filename\n      }, plugins, 'preLex');\n      return applyPlugins(lex(contents, lexOptions), options, plugins, 'postLex');\n    },\n    parse: function (tokens, options) {\n      tokens = tokens.map(function (token) {\n        if (token.type === 'path' && path.extname(token.val) === '') {\n          return {\n            type: 'path',\n            loc: token.loc,\n            val: token.val + '.pug'\n          };\n        }\n\n        return token;\n      });\n      tokens = stripComments(tokens, options);\n      tokens = applyPlugins(tokens, options, plugins, 'preParse');\n      var parseOptions = {};\n      Object.keys(options).forEach(function (key) {\n        parseOptions[key] = options[key];\n      });\n      parseOptions.plugins = plugins.filter(function (plugin) {\n        return !!plugin.parse;\n      }).map(function (plugin) {\n        return plugin.parse;\n      });\n      return applyPlugins(applyPlugins(parse(tokens, parseOptions), options, plugins, 'postParse'), options, plugins, 'preLoad');\n    },\n    resolve: function (filename, source, loadOptions) {\n      var replacementFunc = findReplacementFunc(plugins, 'resolve');\n\n      if (replacementFunc) {\n        return replacementFunc(filename, source, options);\n      }\n\n      return load.resolve(filename, source, loadOptions);\n    },\n    read: function (filename, loadOptions) {\n      dependencies.push(filename);\n      var contents;\n      var replacementFunc = findReplacementFunc(plugins, 'read');\n\n      if (replacementFunc) {\n        contents = replacementFunc(filename, options);\n      } else {\n        contents = load.read(filename, loadOptions);\n      }\n\n      debug_sources[filename] = contents;\n      return contents;\n    }\n  });\n  ast = applyPlugins(ast, options, plugins, 'postLoad');\n  ast = applyPlugins(ast, options, plugins, 'preFilters');\n  var filtersSet = {};\n  Object.keys(exports.filters).forEach(function (key) {\n    filtersSet[key] = exports.filters[key];\n  });\n\n  if (options.filters) {\n    Object.keys(options.filters).forEach(function (key) {\n      filtersSet[key] = options.filters[key];\n    });\n  }\n\n  ast = filters.handleFilters(ast, filtersSet, options.filterOptions, options.filterAliases);\n  ast = applyPlugins(ast, options, plugins, 'postFilters');\n  ast = applyPlugins(ast, options, plugins, 'preLink');\n  ast = link(ast);\n  ast = applyPlugins(ast, options, plugins, 'postLink'); // Compile\n\n  ast = applyPlugins(ast, options, plugins, 'preCodeGen');\n  var js = (findReplacementFunc(plugins, 'generateCode') || generateCode)(ast, {\n    pretty: options.pretty,\n    compileDebug: options.compileDebug,\n    doctype: options.doctype,\n    inlineRuntimeFunctions: options.inlineRuntimeFunctions,\n    globals: options.globals,\n    self: options.self,\n    includeSources: options.includeSources ? debug_sources : false,\n    templateName: options.templateName\n  });\n  js = applyPlugins(js, options, plugins, 'postCodeGen'); // Debug compiler\n\n  if (options.debug) {\n    console.error('\\nCompiled Function:\\n\\n\\u001b[90m%s\\u001b[0m', js.replace(/^/gm, '  '));\n  }\n\n  return {\n    body: js,\n    dependencies: dependencies\n  };\n}\n/**\n * Get the template from a string or a file, either compiled on-the-fly or\n * read from cache (if enabled), and cache the template if needed.\n *\n * If `str` is not set, the file specified in `options.filename` will be read.\n *\n * If `options.cache` is true, this function reads the file from\n * `options.filename` so it must be set prior to calling this function.\n *\n * @param {Object} options\n * @param {String=} str\n * @return {Function}\n * @api private\n */\n\n\nfunction handleTemplateCache(options, str) {\n  var key = options.filename;\n\n  if (options.cache && exports.cache[key]) {\n    return exports.cache[key];\n  } else {\n    if (str === undefined) str = fs.readFileSync(options.filename, 'utf8');\n    var templ = exports.compile(str, options);\n    if (options.cache) exports.cache[key] = templ;\n    return templ;\n  }\n}\n/**\n * Compile a `Function` representation of the given pug `str`.\n *\n * Options:\n *\n *   - `compileDebug` when `false` debugging code is stripped from the compiled\n       template, when it is explicitly `true`, the source code is included in\n       the compiled template for better accuracy.\n *   - `filename` used to improve errors when `compileDebug` is not `false` and to resolve imports/extends\n *\n * @param {String} str\n * @param {Options} options\n * @return {Function}\n * @api public\n */\n\n\nexports.compile = function (str, options) {\n  var options = options || {};\n  str = String(str);\n  var parsed = compileBody(str, {\n    compileDebug: options.compileDebug !== false,\n    filename: options.filename,\n    basedir: options.basedir,\n    pretty: options.pretty,\n    doctype: options.doctype,\n    inlineRuntimeFunctions: options.inlineRuntimeFunctions,\n    globals: options.globals,\n    self: options.self,\n    includeSources: options.compileDebug === true,\n    debug: options.debug,\n    templateName: 'template',\n    filters: options.filters,\n    filterOptions: options.filterOptions,\n    filterAliases: options.filterAliases,\n    plugins: options.plugins\n  });\n  var res = options.inlineRuntimeFunctions ? new Function('', parsed.body + ';return template;')() : runtimeWrap(parsed.body);\n  res.dependencies = parsed.dependencies;\n  return res;\n};\n/**\n * Compile a JavaScript source representation of the given pug `str`.\n *\n * Options:\n *\n *   - `compileDebug` When it is `true`, the source code is included in\n *     the compiled template for better error messages.\n *   - `filename` used to improve errors when `compileDebug` is not `true` and to resolve imports/extends\n *   - `name` the name of the resulting function (defaults to \"template\")\n *   - `module` when it is explicitly `true`, the source code include export module syntax\n *\n * @param {String} str\n * @param {Options} options\n * @return {Object}\n * @api public\n */\n\n\nexports.compileClientWithDependenciesTracked = function (str, options) {\n  var options = options || {};\n  str = String(str);\n  var parsed = compileBody(str, {\n    compileDebug: options.compileDebug,\n    filename: options.filename,\n    basedir: options.basedir,\n    pretty: options.pretty,\n    doctype: options.doctype,\n    inlineRuntimeFunctions: options.inlineRuntimeFunctions !== false,\n    globals: options.globals,\n    self: options.self,\n    includeSources: options.compileDebug,\n    debug: options.debug,\n    templateName: options.name || 'template',\n    filters: options.filters,\n    filterOptions: options.filterOptions,\n    filterAliases: options.filterAliases,\n    plugins: options.plugins\n  });\n  var body = parsed.body;\n\n  if (options.module) {\n    if (options.inlineRuntimeFunctions === false) {\n      body = 'var pug = require(\"pug-runtime\");' + body;\n    }\n\n    body += ' module.exports = ' + (options.name || 'template') + ';';\n  }\n\n  return {\n    body: body,\n    dependencies: parsed.dependencies\n  };\n};\n/**\n * Compile a JavaScript source representation of the given pug `str`.\n *\n * Options:\n *\n *   - `compileDebug` When it is `true`, the source code is included in\n *     the compiled template for better error messages.\n *   - `filename` used to improve errors when `compileDebug` is not `true` and to resolve imports/extends\n *   - `name` the name of the resulting function (defaults to \"template\")\n *\n * @param {String} str\n * @param {Options} options\n * @return {String}\n * @api public\n */\n\n\nexports.compileClient = function (str, options) {\n  return exports.compileClientWithDependenciesTracked(str, options).body;\n};\n/**\n * Compile a `Function` representation of the given pug file.\n *\n * Options:\n *\n *   - `compileDebug` when `false` debugging code is stripped from the compiled\n       template, when it is explicitly `true`, the source code is included in\n       the compiled template for better accuracy.\n *\n * @param {String} path\n * @param {Options} options\n * @return {Function}\n * @api public\n */\n\n\nexports.compileFile = function (path, options) {\n  options = options || {};\n  options.filename = path;\n  return handleTemplateCache(options);\n};\n/**\n * Render the given `str` of pug.\n *\n * Options:\n *\n *   - `cache` enable template caching\n *   - `filename` filename required for `include` / `extends` and caching\n *\n * @param {String} str\n * @param {Object|Function} options or fn\n * @param {Function|undefined} fn\n * @returns {String}\n * @api public\n */\n\n\nexports.render = function (str, options, fn) {\n  // support callback API\n  if ('function' == typeof options) {\n    fn = options, options = undefined;\n  }\n\n  if (typeof fn === 'function') {\n    var res;\n\n    try {\n      res = exports.render(str, options);\n    } catch (ex) {\n      return fn(ex);\n    }\n\n    return fn(null, res);\n  }\n\n  options = options || {}; // cache requires .filename\n\n  if (options.cache && !options.filename) {\n    throw new Error('the \"filename\" option is required for caching');\n  }\n\n  return handleTemplateCache(options, str)(options);\n};\n/**\n * Render a Pug file at the given `path`.\n *\n * @param {String} path\n * @param {Object|Function} options or callback\n * @param {Function|undefined} fn\n * @returns {String}\n * @api public\n */\n\n\nexports.renderFile = function (path, options, fn) {\n  // support callback API\n  if ('function' == typeof options) {\n    fn = options, options = undefined;\n  }\n\n  if (typeof fn === 'function') {\n    var res;\n\n    try {\n      res = exports.renderFile(path, options);\n    } catch (ex) {\n      return fn(ex);\n    }\n\n    return fn(null, res);\n  }\n\n  options = options || {};\n  options.filename = path;\n  return handleTemplateCache(options)(options);\n};\n/**\n * Compile a Pug file at the given `path` for use on the client.\n *\n * @param {String} path\n * @param {Object} options\n * @returns {String}\n * @api public\n */\n\n\nexports.compileFileClient = function (path, options) {\n  var key = path + ':client';\n  options = options || {};\n  options.filename = path;\n\n  if (options.cache && exports.cache[key]) {\n    return exports.cache[key];\n  }\n\n  var str = fs.readFileSync(options.filename, 'utf8');\n  var out = exports.compileClient(str, options);\n  if (options.cache) exports.cache[key] = out;\n  return out;\n};\n/**\n * Express support.\n */\n\n\nexports.__express = function (path, options, fn) {\n  if (options.compileDebug == undefined && process.env.NODE_ENV === 'production') {\n    options.compileDebug = false;\n  }\n\n  exports.renderFile(path, options, fn);\n};","map":{"version":3,"sources":["C:/Users/bekke/Documents/Art Website/node_modules/pug/lib/index.js"],"names":["fs","require","path","lex","stripComments","parse","load","filters","link","generateCode","runtime","runtimeWrap","exports","name","cache","applyPlugins","value","options","plugins","reduce","plugin","findReplacementFunc","eligiblePlugins","filter","length","Error","bind","compileBody","str","debug_sources","filename","dependencies","ast","string","basedir","lexOptions","Object","keys","forEach","key","map","contents","tokens","token","type","extname","val","loc","parseOptions","resolve","source","loadOptions","replacementFunc","read","push","filtersSet","handleFilters","filterOptions","filterAliases","js","pretty","compileDebug","doctype","inlineRuntimeFunctions","globals","self","includeSources","templateName","debug","console","error","replace","body","handleTemplateCache","undefined","readFileSync","templ","compile","String","parsed","res","Function","compileClientWithDependenciesTracked","module","compileClient","compileFile","render","fn","ex","renderFile","compileFileClient","out","__express","process","env","NODE_ENV"],"mappings":"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","sourcesContent":["'use strict';\n\n/*!\n * Pug\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar fs = require('fs');\nvar path = require('path');\nvar lex = require('pug-lexer');\nvar stripComments = require('pug-strip-comments');\nvar parse = require('pug-parser');\nvar load = require('pug-load');\nvar filters = require('pug-filters');\nvar link = require('pug-linker');\nvar generateCode = require('pug-code-gen');\nvar runtime = require('pug-runtime');\nvar runtimeWrap = require('pug-runtime/wrap');\n\n/**\n * Name for detection\n */\n\nexports.name = 'Pug';\n\n/**\n * Pug runtime helpers.\n */\n\nexports.runtime = runtime;\n\n/**\n * Template function cache.\n */\n\nexports.cache = {};\n\nfunction applyPlugins(value, options, plugins, name) {\n  return plugins.reduce(function(value, plugin) {\n    return plugin[name] ? plugin[name](value, options) : value;\n  }, value);\n}\n\nfunction findReplacementFunc(plugins, name) {\n  var eligiblePlugins = plugins.filter(function(plugin) {\n    return plugin[name];\n  });\n\n  if (eligiblePlugins.length > 1) {\n    throw new Error('Two or more plugins all implement ' + name + ' method.');\n  } else if (eligiblePlugins.length) {\n    return eligiblePlugins[0][name].bind(eligiblePlugins[0]);\n  }\n  return null;\n}\n\n/**\n * Object for global custom filters.  Note that you can also just pass a `filters`\n * option to any other method.\n */\nexports.filters = {};\n\n/**\n * Compile the given `str` of pug and return a function body.\n *\n * @param {String} str\n * @param {Object} options\n * @return {Object}\n * @api private\n */\n\nfunction compileBody(str, options) {\n  var debug_sources = {};\n  debug_sources[options.filename] = str;\n  var dependencies = [];\n  var plugins = options.plugins || [];\n  var ast = load.string(str, {\n    filename: options.filename,\n    basedir: options.basedir,\n    lex: function(str, options) {\n      var lexOptions = {};\n      Object.keys(options).forEach(function(key) {\n        lexOptions[key] = options[key];\n      });\n      lexOptions.plugins = plugins\n        .filter(function(plugin) {\n          return !!plugin.lex;\n        })\n        .map(function(plugin) {\n          return plugin.lex;\n        });\n      var contents = applyPlugins(\n        str,\n        {filename: options.filename},\n        plugins,\n        'preLex'\n      );\n      return applyPlugins(\n        lex(contents, lexOptions),\n        options,\n        plugins,\n        'postLex'\n      );\n    },\n    parse: function(tokens, options) {\n      tokens = tokens.map(function(token) {\n        if (token.type === 'path' && path.extname(token.val) === '') {\n          return {\n            type: 'path',\n            loc: token.loc,\n            val: token.val + '.pug',\n          };\n        }\n        return token;\n      });\n      tokens = stripComments(tokens, options);\n      tokens = applyPlugins(tokens, options, plugins, 'preParse');\n      var parseOptions = {};\n      Object.keys(options).forEach(function(key) {\n        parseOptions[key] = options[key];\n      });\n      parseOptions.plugins = plugins\n        .filter(function(plugin) {\n          return !!plugin.parse;\n        })\n        .map(function(plugin) {\n          return plugin.parse;\n        });\n\n      return applyPlugins(\n        applyPlugins(\n          parse(tokens, parseOptions),\n          options,\n          plugins,\n          'postParse'\n        ),\n        options,\n        plugins,\n        'preLoad'\n      );\n    },\n    resolve: function(filename, source, loadOptions) {\n      var replacementFunc = findReplacementFunc(plugins, 'resolve');\n      if (replacementFunc) {\n        return replacementFunc(filename, source, options);\n      }\n\n      return load.resolve(filename, source, loadOptions);\n    },\n    read: function(filename, loadOptions) {\n      dependencies.push(filename);\n\n      var contents;\n\n      var replacementFunc = findReplacementFunc(plugins, 'read');\n      if (replacementFunc) {\n        contents = replacementFunc(filename, options);\n      } else {\n        contents = load.read(filename, loadOptions);\n      }\n\n      debug_sources[filename] = contents;\n      return contents;\n    },\n  });\n  ast = applyPlugins(ast, options, plugins, 'postLoad');\n  ast = applyPlugins(ast, options, plugins, 'preFilters');\n\n  var filtersSet = {};\n  Object.keys(exports.filters).forEach(function(key) {\n    filtersSet[key] = exports.filters[key];\n  });\n  if (options.filters) {\n    Object.keys(options.filters).forEach(function(key) {\n      filtersSet[key] = options.filters[key];\n    });\n  }\n  ast = filters.handleFilters(\n    ast,\n    filtersSet,\n    options.filterOptions,\n    options.filterAliases\n  );\n\n  ast = applyPlugins(ast, options, plugins, 'postFilters');\n  ast = applyPlugins(ast, options, plugins, 'preLink');\n  ast = link(ast);\n  ast = applyPlugins(ast, options, plugins, 'postLink');\n\n  // Compile\n  ast = applyPlugins(ast, options, plugins, 'preCodeGen');\n  var js = (findReplacementFunc(plugins, 'generateCode') || generateCode)(ast, {\n    pretty: options.pretty,\n    compileDebug: options.compileDebug,\n    doctype: options.doctype,\n    inlineRuntimeFunctions: options.inlineRuntimeFunctions,\n    globals: options.globals,\n    self: options.self,\n    includeSources: options.includeSources ? debug_sources : false,\n    templateName: options.templateName,\n  });\n  js = applyPlugins(js, options, plugins, 'postCodeGen');\n\n  // Debug compiler\n  if (options.debug) {\n    console.error(\n      '\\nCompiled Function:\\n\\n\\u001b[90m%s\\u001b[0m',\n      js.replace(/^/gm, '  ')\n    );\n  }\n\n  return {body: js, dependencies: dependencies};\n}\n\n/**\n * Get the template from a string or a file, either compiled on-the-fly or\n * read from cache (if enabled), and cache the template if needed.\n *\n * If `str` is not set, the file specified in `options.filename` will be read.\n *\n * If `options.cache` is true, this function reads the file from\n * `options.filename` so it must be set prior to calling this function.\n *\n * @param {Object} options\n * @param {String=} str\n * @return {Function}\n * @api private\n */\nfunction handleTemplateCache(options, str) {\n  var key = options.filename;\n  if (options.cache && exports.cache[key]) {\n    return exports.cache[key];\n  } else {\n    if (str === undefined) str = fs.readFileSync(options.filename, 'utf8');\n    var templ = exports.compile(str, options);\n    if (options.cache) exports.cache[key] = templ;\n    return templ;\n  }\n}\n\n/**\n * Compile a `Function` representation of the given pug `str`.\n *\n * Options:\n *\n *   - `compileDebug` when `false` debugging code is stripped from the compiled\n       template, when it is explicitly `true`, the source code is included in\n       the compiled template for better accuracy.\n *   - `filename` used to improve errors when `compileDebug` is not `false` and to resolve imports/extends\n *\n * @param {String} str\n * @param {Options} options\n * @return {Function}\n * @api public\n */\n\nexports.compile = function(str, options) {\n  var options = options || {};\n\n  str = String(str);\n\n  var parsed = compileBody(str, {\n    compileDebug: options.compileDebug !== false,\n    filename: options.filename,\n    basedir: options.basedir,\n    pretty: options.pretty,\n    doctype: options.doctype,\n    inlineRuntimeFunctions: options.inlineRuntimeFunctions,\n    globals: options.globals,\n    self: options.self,\n    includeSources: options.compileDebug === true,\n    debug: options.debug,\n    templateName: 'template',\n    filters: options.filters,\n    filterOptions: options.filterOptions,\n    filterAliases: options.filterAliases,\n    plugins: options.plugins,\n  });\n\n  var res = options.inlineRuntimeFunctions\n    ? new Function('', parsed.body + ';return template;')()\n    : runtimeWrap(parsed.body);\n\n  res.dependencies = parsed.dependencies;\n\n  return res;\n};\n\n/**\n * Compile a JavaScript source representation of the given pug `str`.\n *\n * Options:\n *\n *   - `compileDebug` When it is `true`, the source code is included in\n *     the compiled template for better error messages.\n *   - `filename` used to improve errors when `compileDebug` is not `true` and to resolve imports/extends\n *   - `name` the name of the resulting function (defaults to \"template\")\n *   - `module` when it is explicitly `true`, the source code include export module syntax\n *\n * @param {String} str\n * @param {Options} options\n * @return {Object}\n * @api public\n */\n\nexports.compileClientWithDependenciesTracked = function(str, options) {\n  var options = options || {};\n\n  str = String(str);\n  var parsed = compileBody(str, {\n    compileDebug: options.compileDebug,\n    filename: options.filename,\n    basedir: options.basedir,\n    pretty: options.pretty,\n    doctype: options.doctype,\n    inlineRuntimeFunctions: options.inlineRuntimeFunctions !== false,\n    globals: options.globals,\n    self: options.self,\n    includeSources: options.compileDebug,\n    debug: options.debug,\n    templateName: options.name || 'template',\n    filters: options.filters,\n    filterOptions: options.filterOptions,\n    filterAliases: options.filterAliases,\n    plugins: options.plugins,\n  });\n\n  var body = parsed.body;\n\n  if (options.module) {\n    if (options.inlineRuntimeFunctions === false) {\n      body = 'var pug = require(\"pug-runtime\");' + body;\n    }\n    body += ' module.exports = ' + (options.name || 'template') + ';';\n  }\n\n  return {body: body, dependencies: parsed.dependencies};\n};\n\n/**\n * Compile a JavaScript source representation of the given pug `str`.\n *\n * Options:\n *\n *   - `compileDebug` When it is `true`, the source code is included in\n *     the compiled template for better error messages.\n *   - `filename` used to improve errors when `compileDebug` is not `true` and to resolve imports/extends\n *   - `name` the name of the resulting function (defaults to \"template\")\n *\n * @param {String} str\n * @param {Options} options\n * @return {String}\n * @api public\n */\nexports.compileClient = function(str, options) {\n  return exports.compileClientWithDependenciesTracked(str, options).body;\n};\n\n/**\n * Compile a `Function` representation of the given pug file.\n *\n * Options:\n *\n *   - `compileDebug` when `false` debugging code is stripped from the compiled\n       template, when it is explicitly `true`, the source code is included in\n       the compiled template for better accuracy.\n *\n * @param {String} path\n * @param {Options} options\n * @return {Function}\n * @api public\n */\nexports.compileFile = function(path, options) {\n  options = options || {};\n  options.filename = path;\n  return handleTemplateCache(options);\n};\n\n/**\n * Render the given `str` of pug.\n *\n * Options:\n *\n *   - `cache` enable template caching\n *   - `filename` filename required for `include` / `extends` and caching\n *\n * @param {String} str\n * @param {Object|Function} options or fn\n * @param {Function|undefined} fn\n * @returns {String}\n * @api public\n */\n\nexports.render = function(str, options, fn) {\n  // support callback API\n  if ('function' == typeof options) {\n    (fn = options), (options = undefined);\n  }\n  if (typeof fn === 'function') {\n    var res;\n    try {\n      res = exports.render(str, options);\n    } catch (ex) {\n      return fn(ex);\n    }\n    return fn(null, res);\n  }\n\n  options = options || {};\n\n  // cache requires .filename\n  if (options.cache && !options.filename) {\n    throw new Error('the \"filename\" option is required for caching');\n  }\n\n  return handleTemplateCache(options, str)(options);\n};\n\n/**\n * Render a Pug file at the given `path`.\n *\n * @param {String} path\n * @param {Object|Function} options or callback\n * @param {Function|undefined} fn\n * @returns {String}\n * @api public\n */\n\nexports.renderFile = function(path, options, fn) {\n  // support callback API\n  if ('function' == typeof options) {\n    (fn = options), (options = undefined);\n  }\n  if (typeof fn === 'function') {\n    var res;\n    try {\n      res = exports.renderFile(path, options);\n    } catch (ex) {\n      return fn(ex);\n    }\n    return fn(null, res);\n  }\n\n  options = options || {};\n\n  options.filename = path;\n  return handleTemplateCache(options)(options);\n};\n\n/**\n * Compile a Pug file at the given `path` for use on the client.\n *\n * @param {String} path\n * @param {Object} options\n * @returns {String}\n * @api public\n */\n\nexports.compileFileClient = function(path, options) {\n  var key = path + ':client';\n  options = options || {};\n\n  options.filename = path;\n\n  if (options.cache && exports.cache[key]) {\n    return exports.cache[key];\n  }\n\n  var str = fs.readFileSync(options.filename, 'utf8');\n  var out = exports.compileClient(str, options);\n  if (options.cache) exports.cache[key] = out;\n  return out;\n};\n\n/**\n * Express support.\n */\n\nexports.__express = function(path, options, fn) {\n  if (\n    options.compileDebug == undefined &&\n    process.env.NODE_ENV === 'production'\n  ) {\n    options.compileDebug = false;\n  }\n  exports.renderFile(path, options, fn);\n};\n"]},"metadata":{},"sourceType":"script"}