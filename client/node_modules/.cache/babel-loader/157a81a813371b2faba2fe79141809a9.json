{"ast":null,"code":"'use strict';\n\nvar acorn = require('acorn');\n\nvar objectAssign = require('object-assign');\n\nmodule.exports = isExpression;\nvar DEFAULT_OPTIONS = {\n  throw: false,\n  strict: false,\n  lineComment: false\n};\n\nfunction isExpression(src, options) {\n  options = objectAssign({}, DEFAULT_OPTIONS, options);\n\n  try {\n    var parser = new acorn.Parser(options, src, 0);\n\n    if (options.strict) {\n      parser.strict = true;\n    }\n\n    if (!options.lineComment) {\n      parser.skipLineComment = function (startSkip) {\n        this.raise(this.pos, 'Line comments not allowed in an expression');\n      };\n    }\n\n    parser.nextToken();\n    parser.parseExpression();\n\n    if (parser.type !== acorn.tokTypes.eof) {\n      parser.unexpected();\n    }\n  } catch (ex) {\n    if (!options.throw) {\n      return false;\n    }\n\n    throw ex;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["C:/Users/bekke/Documents/Art Website/node_modules/is-expression/index.js"],"names":["acorn","require","objectAssign","module","exports","isExpression","DEFAULT_OPTIONS","throw","strict","lineComment","src","options","parser","Parser","skipLineComment","startSkip","raise","pos","nextToken","parseExpression","type","tokTypes","eof","unexpected","ex"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,eAAD,CAA1B;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,YAAjB;AAEA,IAAIC,eAAe,GAAG;AACpBC,EAAAA,KAAK,EAAE,KADa;AAEpBC,EAAAA,MAAM,EAAE,KAFY;AAGpBC,EAAAA,WAAW,EAAE;AAHO,CAAtB;;AAMA,SAASJ,YAAT,CAAsBK,GAAtB,EAA2BC,OAA3B,EAAoC;AAClCA,EAAAA,OAAO,GAAGT,YAAY,CAAC,EAAD,EAAKI,eAAL,EAAsBK,OAAtB,CAAtB;;AAEA,MAAI;AACF,QAAIC,MAAM,GAAG,IAAIZ,KAAK,CAACa,MAAV,CAAiBF,OAAjB,EAA0BD,GAA1B,EAA+B,CAA/B,CAAb;;AAEA,QAAIC,OAAO,CAACH,MAAZ,EAAoB;AAClBI,MAAAA,MAAM,CAACJ,MAAP,GAAgB,IAAhB;AACD;;AAED,QAAI,CAACG,OAAO,CAACF,WAAb,EAA0B;AACxBG,MAAAA,MAAM,CAACE,eAAP,GAAyB,UAAUC,SAAV,EAAqB;AAC5C,aAAKC,KAAL,CAAW,KAAKC,GAAhB,EAAqB,4CAArB;AACD,OAFD;AAGD;;AAEDL,IAAAA,MAAM,CAACM,SAAP;AACAN,IAAAA,MAAM,CAACO,eAAP;;AAEA,QAAIP,MAAM,CAACQ,IAAP,KAAgBpB,KAAK,CAACqB,QAAN,CAAeC,GAAnC,EAAwC;AACtCV,MAAAA,MAAM,CAACW,UAAP;AACD;AACF,GAnBD,CAmBE,OAAOC,EAAP,EAAW;AACX,QAAI,CAACb,OAAO,CAACJ,KAAb,EAAoB;AAClB,aAAO,KAAP;AACD;;AAED,UAAMiB,EAAN;AACD;;AAED,SAAO,IAAP;AACD","sourcesContent":["'use strict';\n\nvar acorn = require('acorn');\nvar objectAssign = require('object-assign');\n\nmodule.exports = isExpression;\n\nvar DEFAULT_OPTIONS = {\n  throw: false,\n  strict: false,\n  lineComment: false\n};\n\nfunction isExpression(src, options) {\n  options = objectAssign({}, DEFAULT_OPTIONS, options);\n\n  try {\n    var parser = new acorn.Parser(options, src, 0);\n\n    if (options.strict) {\n      parser.strict = true;\n    }\n\n    if (!options.lineComment) {\n      parser.skipLineComment = function (startSkip) {\n        this.raise(this.pos, 'Line comments not allowed in an expression');\n      };\n    }\n\n    parser.nextToken();\n    parser.parseExpression();\n\n    if (parser.type !== acorn.tokTypes.eof) {\n      parser.unexpected();\n    }\n  } catch (ex) {\n    if (!options.throw) {\n      return false;\n    }\n\n    throw ex;\n  }\n\n  return true;\n}\n"]},"metadata":{},"sourceType":"script"}