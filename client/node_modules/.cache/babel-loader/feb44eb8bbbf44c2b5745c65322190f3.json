{"ast":null,"code":"'use strict';\n\nmodule.exports = walkAST;\n\nfunction walkAST(ast, before, after, options) {\n  if (after && typeof after === 'object' && typeof options === 'undefined') {\n    options = after;\n    after = null;\n  }\n\n  options = options || {\n    includeDependencies: false\n  };\n  var parents = options.parents = options.parents || [];\n\n  var replace = function replace(replacement) {\n    if (Array.isArray(replacement) && !replace.arrayAllowed) {\n      throw new Error('replace() can only be called with an array if the last parent is a Block or NamedBlock');\n    }\n\n    ast = replacement;\n  };\n\n  replace.arrayAllowed = parents[0] && (/^(Named)?Block$/.test(parents[0].type) || parents[0].type === 'RawInclude' && ast.type === 'IncludeFilter');\n\n  if (before) {\n    var result = before(ast, replace);\n\n    if (result === false) {\n      return ast;\n    } else if (Array.isArray(ast)) {\n      // return right here to skip after() call on array\n      return walkAndMergeNodes(ast);\n    }\n  }\n\n  parents.unshift(ast);\n\n  switch (ast.type) {\n    case 'NamedBlock':\n    case 'Block':\n      ast.nodes = walkAndMergeNodes(ast.nodes);\n      break;\n\n    case 'Case':\n    case 'Filter':\n    case 'Mixin':\n    case 'Tag':\n    case 'InterpolatedTag':\n    case 'When':\n    case 'Code':\n    case 'While':\n      if (ast.block) {\n        ast.block = walkAST(ast.block, before, after, options);\n      }\n\n      break;\n\n    case 'Each':\n      if (ast.block) {\n        ast.block = walkAST(ast.block, before, after, options);\n      }\n\n      if (ast.alternate) {\n        ast.alternate = walkAST(ast.alternate, before, after, options);\n      }\n\n      break;\n\n    case 'EachOf':\n      if (ast.block) {\n        ast.block = walkAST(ast.block, before, after, options);\n      }\n\n      break;\n\n    case 'Conditional':\n      if (ast.consequent) {\n        ast.consequent = walkAST(ast.consequent, before, after, options);\n      }\n\n      if (ast.alternate) {\n        ast.alternate = walkAST(ast.alternate, before, after, options);\n      }\n\n      break;\n\n    case 'Include':\n      walkAST(ast.block, before, after, options);\n      walkAST(ast.file, before, after, options);\n      break;\n\n    case 'Extends':\n      walkAST(ast.file, before, after, options);\n      break;\n\n    case 'RawInclude':\n      ast.filters = walkAndMergeNodes(ast.filters);\n      walkAST(ast.file, before, after, options);\n      break;\n\n    case 'Attrs':\n    case 'BlockComment':\n    case 'Comment':\n    case 'Doctype':\n    case 'IncludeFilter':\n    case 'MixinBlock':\n    case 'YieldBlock':\n    case 'Text':\n      break;\n\n    case 'FileReference':\n      if (options.includeDependencies && ast.ast) {\n        walkAST(ast.ast, before, after, options);\n      }\n\n      break;\n\n    default:\n      throw new Error('Unexpected node type ' + ast.type);\n      break;\n  }\n\n  parents.shift();\n  after && after(ast, replace);\n  return ast;\n\n  function walkAndMergeNodes(nodes) {\n    return nodes.reduce(function (nodes, node) {\n      var result = walkAST(node, before, after, options);\n\n      if (Array.isArray(result)) {\n        return nodes.concat(result);\n      } else {\n        return nodes.concat([result]);\n      }\n    }, []);\n  }\n}","map":{"version":3,"sources":["C:/Users/bekke/Documents/Art Website/node_modules/pug-walk/index.js"],"names":["module","exports","walkAST","ast","before","after","options","includeDependencies","parents","replace","replacement","Array","isArray","arrayAllowed","Error","test","type","result","walkAndMergeNodes","unshift","nodes","block","alternate","consequent","file","filters","shift","reduce","node","concat"],"mappings":"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","sourcesContent":["'use strict';\n\nmodule.exports = walkAST;\nfunction walkAST(ast, before, after, options) {\n  if (after && typeof after === 'object' && typeof options === 'undefined') {\n    options = after;\n    after = null;\n  }\n  options = options || {includeDependencies: false};\n  var parents = (options.parents = options.parents || []);\n\n  var replace = function replace(replacement) {\n    if (Array.isArray(replacement) && !replace.arrayAllowed) {\n      throw new Error(\n        'replace() can only be called with an array if the last parent is a Block or NamedBlock'\n      );\n    }\n    ast = replacement;\n  };\n  replace.arrayAllowed =\n    parents[0] &&\n    (/^(Named)?Block$/.test(parents[0].type) ||\n      (parents[0].type === 'RawInclude' && ast.type === 'IncludeFilter'));\n\n  if (before) {\n    var result = before(ast, replace);\n    if (result === false) {\n      return ast;\n    } else if (Array.isArray(ast)) {\n      // return right here to skip after() call on array\n      return walkAndMergeNodes(ast);\n    }\n  }\n\n  parents.unshift(ast);\n\n  switch (ast.type) {\n    case 'NamedBlock':\n    case 'Block':\n      ast.nodes = walkAndMergeNodes(ast.nodes);\n      break;\n    case 'Case':\n    case 'Filter':\n    case 'Mixin':\n    case 'Tag':\n    case 'InterpolatedTag':\n    case 'When':\n    case 'Code':\n    case 'While':\n      if (ast.block) {\n        ast.block = walkAST(ast.block, before, after, options);\n      }\n      break;\n    case 'Each':\n      if (ast.block) {\n        ast.block = walkAST(ast.block, before, after, options);\n      }\n      if (ast.alternate) {\n        ast.alternate = walkAST(ast.alternate, before, after, options);\n      }\n      break;\n    case 'EachOf':\n      if (ast.block) {\n        ast.block = walkAST(ast.block, before, after, options);\n      }\n      break;\n    case 'Conditional':\n      if (ast.consequent) {\n        ast.consequent = walkAST(ast.consequent, before, after, options);\n      }\n      if (ast.alternate) {\n        ast.alternate = walkAST(ast.alternate, before, after, options);\n      }\n      break;\n    case 'Include':\n      walkAST(ast.block, before, after, options);\n      walkAST(ast.file, before, after, options);\n      break;\n    case 'Extends':\n      walkAST(ast.file, before, after, options);\n      break;\n    case 'RawInclude':\n      ast.filters = walkAndMergeNodes(ast.filters);\n      walkAST(ast.file, before, after, options);\n      break;\n    case 'Attrs':\n    case 'BlockComment':\n    case 'Comment':\n    case 'Doctype':\n    case 'IncludeFilter':\n    case 'MixinBlock':\n    case 'YieldBlock':\n    case 'Text':\n      break;\n    case 'FileReference':\n      if (options.includeDependencies && ast.ast) {\n        walkAST(ast.ast, before, after, options);\n      }\n      break;\n    default:\n      throw new Error('Unexpected node type ' + ast.type);\n      break;\n  }\n\n  parents.shift();\n\n  after && after(ast, replace);\n  return ast;\n\n  function walkAndMergeNodes(nodes) {\n    return nodes.reduce(function(nodes, node) {\n      var result = walkAST(node, before, after, options);\n      if (Array.isArray(result)) {\n        return nodes.concat(result);\n      } else {\n        return nodes.concat([result]);\n      }\n    }, []);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}